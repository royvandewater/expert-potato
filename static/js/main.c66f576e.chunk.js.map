{"version":3,"sources":["Connection.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["hashObject","obj","str","JSON","stringify","crypto","update","digest","Connection","bus","index","messages","entries","sendMessage","text","message","timestamp","formatISO","Date","now","author","push","emit","R","sync","rootHash","forEach","hash","type","data","hashes","merkle","pairs","things","i","length","pair","first","second","toPairs","newHashes","onRoot","root","onQuery","node","onNode","leaves","leaf","onMessage","sort","log","console","on","EventEmitter","ConnectionSection","connection","input","React","useRef","className","onSubmit","event","preventDefault","current","value","ref","map","format","parseISO","formatTime","App","connections","useMemo","window","createConnections","useState","messageLog","setMessageLog","useEffect","removeAllListeners","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c66f576e.chunk.js","sourcesContent":["import { formatISO } from 'date-fns'\nimport { EventEmitter } from 'events'\nimport * as R from 'ramda'\nimport * as crypto from 'crypto'\n\ninterface Message {\n  timestamp: string;\n  author: string;\n  text: string;\n}\n\ninterface Entry {\n  type: 'node' | 'message';\n  data: string[] | Message;\n}\n\ninterface Entries {\n  [key: string]: Entry\n}\n\nfunction toPairs<T>(things: T[]): T[][] {\n  const pairs = [] as T[][];\n\n\n  for (let i = 0; i < things.length; i += 2) {\n    const pair = [] as T[]\n    const first = R.nth(i, things)\n    const second = R.nth(i + 1, things)\n\n    if (first) pair.push(first)\n    if (second) pair.push(second)\n\n    pairs.push(pair)\n  }\n\n  return pairs\n}\n\nfunction hashObject(obj: object): string {\n  const str = JSON.stringify(obj)\n\n  return crypto.createHash('sha1').update(str).digest('hex')\n}\n\nclass Connection extends EventEmitter {\n  private readonly bus: EventEmitter;\n  public readonly index: number;\n  private readonly messages: Message[];\n  private entries: Entries;\n\n  constructor({bus, index}: {bus: EventEmitter, index:number}) {\n    super()\n    this.bus = bus \n    this.index = index \n    this.messages = [];\n    this.entries = {};\n    this.bus.on('root', this.onRoot)\n    this.bus.on('query', this.onQuery)\n    this.bus.on('node', this.onNode)\n    this.bus.on('message', this.onMessage)\n  }\n\n  sendMessage = (text: string) => {\n    const message: Message = {\n      timestamp: formatISO(Date.now()), \n      author:`connection ${this.index}`, \n      text,\n    }\n\n    this.messages.push(message)\n    this.emit('messages:changed', R.clone(this.messages))\n    this.sync();\n  }\n\n  private rootHash = () => {\n    this.entries = {}\n\n    this.messages.forEach(message => {\n      const hash = hashObject(message)\n      this.entries[hash] = {type: 'message', data: message}\n    })\n\n    const hashes = R.keys(this.entries) as string[]\n    return this.merkle(hashes)\n  }\n\n  private merkle = (hashes: string[]): string | null => {\n    if (R.length(hashes) === 0) return null;\n    if (R.length(hashes) === 1) return hashes[0];\n\n    const pairs = toPairs(hashes)\n\n    const newHashes = [] as string[]\n\n    pairs.forEach(pair => {\n      const hash = hashObject(pair)\n      this.entries[hash] = {type: 'node', data: pair}\n      newHashes.push(hash)\n    })\n\n    return this.merkle(newHashes)\n  }\n\n\n  private onRoot = (root: string) => {\n    if (root === this.rootHash()) return;\n    this.bus.emit('query', root);\n  }\n\n  private onQuery = (hash: string) => {\n    const node = this.entries[hash]\n\n    if (!node) return;\n    if (node.type === 'node') return this.bus.emit('node', node.data)\n    if (node.type === 'message') return this.bus.emit('message', node.data)\n  }\n\n  private onNode = (leaves: string[]) => {\n    leaves.forEach(leaf => {\n      if (this.entries[leaf]) return;\n\n      this.bus.emit('query', leaf)\n    })\n  }\n\n  private onMessage = (message: Message) => {\n    if (R.any(R.equals(message), this.messages)) return;\n    this.messages.push(message)\n    this.messages.sort()\n    this.emit('messages:changed', R.clone(this.messages))\n  }\n\n  private sync = () => {\n    const root = this.rootHash()\n    this.bus.emit('root', root)\n  }\n\n  private log = (...message: any[]) => {\n    console.log(`connection(${this.index})`, ...message)\n  }\n}\n\nexport default Connection","import React from 'react';\nimport * as R from 'ramda'\nimport './App.css';\nimport Connection from './Connection'\nimport { EventEmitter } from 'events';\nimport { parseISO } from 'date-fns/esm';\nimport { format } from 'date-fns';\n\nconst formatTime = (timestamp: string) => {\n  return format(parseISO(timestamp), 'HH:mm:ss')\n}\n\ninterface Message {\n  timestamp: string;\n  author: string;\n  text: string;\n}\n\ninterface ConnectionProps {\n  connection: Connection;\n  messages: Message[];\n}\n\nconst ConnectionSection = ({connection, messages}: ConnectionProps) => {\n  const input = React.useRef<HTMLInputElement>(null)\n\n  const sendMessage = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!input.current?.value) return\n    connection.sendMessage(input.current.value)\n    input.current.value = \"\"\n  }\n\n  return (\n    <section className=\"ConnectionSection\">\n      <h1>Connection: {connection.index}</h1>\n      <div>\n        <form onSubmit={sendMessage}>\n          <input ref={input} type=\"text\" />\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n      <h2>Messages</h2>\n\n      <div className=\"Messages\">\n        {messages.map(({timestamp, author, text}, i) => (\n          <>\n            <div className=\"Timestamp\">{formatTime(timestamp)}</div>\n            <div className=\"Author\">{author}</div>\n            <div>{text}</div>\n          </>\n        ))}\n      </div>\n    </section>\n  )\n}\n\ninterface MessageLogItem {\n  index: number;\n  messages: Message[];\n}\n\nconst createConnections = () => {\n  const bus = new EventEmitter();\n\n  bus.on('root', (message) => console.log('on:root', message))\n  bus.on('query', (message) => console.log('on:query', message))\n  bus.on('node', (message) => console.log('on:node', message))\n  bus.on('message', (message) => console.log('on:message', message));\n\n  (window as any).bus = bus\n\n  return R.times(index => new Connection({bus, index}), 3)\n}\n\nfunction App() {\n  const connections = React.useMemo(() => createConnections(), []);\n  const [messageLog, setMessageLog] = React.useState<MessageLogItem[]>(connections.map(({index}) => ({index, messages: []}))) \n\n  React.useEffect(() => {\n    connections.forEach(connection => {\n      connection.on('messages:changed', messages => {\n        const { index } = connection\n\n        setMessageLog(messageLog => R.update(index, { index, messages }, messageLog))\n      })\n    })\n\n    return () => {\n      connections.forEach(connection => connection.removeAllListeners())\n    }\n  }, [connections])\n\n  return (\n    <div className=\"App\">\n      {connections.map(connection => (\n        <ConnectionSection \n          key={connection.index} \n          connection={connection} \n          messages={messageLog[connection.index].messages} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}